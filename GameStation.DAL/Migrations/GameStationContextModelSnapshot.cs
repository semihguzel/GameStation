// <auto-generated />
using System;
using GameStation.DAL.Concrete.EntityFramework;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace GameStation.DAL.Migrations
{
    [DbContext(typeof(GameStationContext))]
    partial class GameStationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.11-servicing-32099")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MVCeTicaret.Models.Category", b =>
                {
                    b.Property<int>("CategoryID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Description")
                        .HasMaxLength(250);

                    b.Property<bool>("IsActive");

                    b.Property<string>("Picture1")
                        .HasMaxLength(400);

                    b.Property<string>("Picture2")
                        .HasMaxLength(400);

                    b.HasKey("CategoryID");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("MVCeTicaret.Models.Customer", b =>
                {
                    b.Property<int>("CustomerID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasMaxLength(200);

                    b.Property<string>("AltEmail")
                        .HasMaxLength(40);

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("date");

                    b.Property<string>("City")
                        .HasMaxLength(20);

                    b.Property<string>("Country")
                        .HasMaxLength(20);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .HasMaxLength(40);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("Gender");

                    b.Property<DateTime>("LastLogin")
                        .HasColumnType("date");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Mobile1")
                        .HasMaxLength(20);

                    b.Property<string>("Mobile2")
                        .HasMaxLength(20);

                    b.Property<string>("Notes")
                        .HasMaxLength(250);

                    b.Property<string>("Organization")
                        .HasMaxLength(50);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Phone1")
                        .HasMaxLength(20);

                    b.Property<string>("Phone2")
                        .HasMaxLength(20);

                    b.Property<string>("Picture")
                        .HasMaxLength(400);

                    b.Property<string>("PostalCode")
                        .HasMaxLength(20);

                    b.Property<string>("State")
                        .HasMaxLength(20);

                    b.Property<string>("Status")
                        .HasMaxLength(20);

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("CustomerID");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("MVCeTicaret.Models.Order", b =>
                {
                    b.Property<int>("OrderID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("CancelOrder");

                    b.Property<bool>("Deliver");

                    b.Property<DateTime>("DeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Discount");

                    b.Property<DateTime>("DispatchDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Dispatched");

                    b.Property<bool>("IsCompleted");

                    b.Property<string>("Notes")
                        .HasMaxLength(150);

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderDetailID");

                    b.Property<int>("PaymentID");

                    b.Property<bool>("Shipped");

                    b.Property<DateTime>("ShippedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ShippingDetailID");

                    b.Property<decimal?>("Taxes");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("money");

                    b.HasKey("OrderID");

                    b.HasIndex("OrderDetailID");

                    b.HasIndex("PaymentID");

                    b.HasIndex("ShippingDetailID");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("MVCeTicaret.Models.OrderDetail", b =>
                {
                    b.Property<int>("OrderDetailID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CustomerID");

                    b.Property<decimal>("Discount");

                    b.Property<bool>("IsCompleted");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductID");

                    b.Property<int>("Quantity");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("money");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("money");

                    b.HasKey("OrderDetailID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("ProductID");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("MVCeTicaret.Models.Payment", b =>
                {
                    b.Property<int>("PaymentID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Balance")
                        .HasColumnType("money");

                    b.Property<decimal>("CreditAmount")
                        .HasColumnType("money");

                    b.Property<decimal>("DebitAmount")
                        .HasColumnType("money");

                    b.Property<DateTime>("PaymentDatetime")
                        .HasColumnType("datetime2");

                    b.Property<int>("PaymentTypeID");

                    b.HasKey("PaymentID");

                    b.HasIndex("PaymentTypeID");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("MVCeTicaret.Models.PaymentType", b =>
                {
                    b.Property<int>("PaymentTypeID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(150);

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("PaymentTypeID");

                    b.ToTable("PaymentTypes");
                });

            modelBuilder.Entity("MVCeTicaret.Models.Product", b =>
                {
                    b.Property<int>("ProductID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AltText")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<decimal>("Discount");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("LongDescription")
                        .IsRequired()
                        .HasMaxLength(1500);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Notes")
                        .HasMaxLength(250);

                    b.Property<decimal?>("OldPrice")
                        .HasColumnType("money");

                    b.Property<string>("Picture1")
                        .HasMaxLength(500);

                    b.Property<string>("Picture2")
                        .HasMaxLength(500);

                    b.Property<string>("Picture3")
                        .HasMaxLength(500);

                    b.Property<string>("Picture4")
                        .HasMaxLength(500);

                    b.Property<bool?>("ProductAvailable");

                    b.Property<string>("QuantityPerUnit")
                        .HasMaxLength(50);

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasMaxLength(300);

                    b.Property<string>("Size")
                        .HasMaxLength(30);

                    b.Property<int>("SubCategoryID");

                    b.Property<int>("SupplierID");

                    b.Property<int?>("UnitOnOrder");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("money");

                    b.Property<string>("UnitWeight")
                        .HasMaxLength(30);

                    b.Property<int>("UnitsInStock");

                    b.HasKey("ProductID");

                    b.HasIndex("SubCategoryID");

                    b.HasIndex("SupplierID");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("MVCeTicaret.Models.RecentlyView", b =>
                {
                    b.Property<int>("RecentlyViewID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CustomerID");

                    b.Property<string>("Notes")
                        .HasMaxLength(150);

                    b.Property<int>("ProductID");

                    b.Property<DateTime>("ViewDate")
                        .HasColumnType("datetime2");

                    b.HasKey("RecentlyViewID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("ProductID");

                    b.ToTable("RecentlyViews");
                });

            modelBuilder.Entity("MVCeTicaret.Models.Review", b =>
                {
                    b.Property<int>("ReviewID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(5000);

                    b.Property<int>("CustomerID");

                    b.Property<DateTime>("Datetime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(50);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.Property<int>("ProductID");

                    b.Property<int>("Rate");

                    b.HasKey("ReviewID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("ProductID");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("MVCeTicaret.Models.ShippingDetail", b =>
                {
                    b.Property<int>("ShippingDetailID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<string>("Email")
                        .HasMaxLength(50);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Mobile")
                        .HasMaxLength(30);

                    b.Property<string>("PostalCode")
                        .HasMaxLength(25);

                    b.Property<string>("Province")
                        .HasMaxLength(30);

                    b.HasKey("ShippingDetailID");

                    b.ToTable("ShippingDetails");
                });

            modelBuilder.Entity("MVCeTicaret.Models.SubCategory", b =>
                {
                    b.Property<int>("SubCategoryID");

                    b.Property<int>("CategoryID");

                    b.Property<string>("Description")
                        .HasMaxLength(250);

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Picture1")
                        .HasMaxLength(500);

                    b.Property<string>("Picture2")
                        .HasMaxLength(500);

                    b.HasKey("SubCategoryID");

                    b.ToTable("SubCategories");
                });

            modelBuilder.Entity("MVCeTicaret.Models.Supplier", b =>
                {
                    b.Property<int>("SupplierID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasMaxLength(150);

                    b.Property<string>("City")
                        .HasMaxLength(50);

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("ContactName")
                        .HasMaxLength(50);

                    b.Property<string>("ContactTitle")
                        .HasMaxLength(50);

                    b.Property<string>("Country")
                        .HasMaxLength(50);

                    b.Property<string>("Email")
                        .HasMaxLength(50);

                    b.Property<string>("Fax")
                        .HasMaxLength(20);

                    b.Property<string>("Mobile")
                        .HasMaxLength(20);

                    b.Property<string>("Phone")
                        .HasMaxLength(20);

                    b.HasKey("SupplierID");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("MVCeTicaret.Models.WishList", b =>
                {
                    b.Property<int>("WishListID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CustomerID");

                    b.Property<bool>("IsActive");

                    b.Property<int>("ProductID");

                    b.HasKey("WishListID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("ProductID");

                    b.ToTable("Wishlists");
                });

            modelBuilder.Entity("MVCeTicaret.Models.Order", b =>
                {
                    b.HasOne("MVCeTicaret.Models.OrderDetail", "OrderDetail")
                        .WithMany("Orders")
                        .HasForeignKey("OrderDetailID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MVCeTicaret.Models.Payment", "Payment")
                        .WithMany("Orders")
                        .HasForeignKey("PaymentID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MVCeTicaret.Models.ShippingDetail", "ShippingDetail")
                        .WithMany("Orders")
                        .HasForeignKey("ShippingDetailID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MVCeTicaret.Models.OrderDetail", b =>
                {
                    b.HasOne("MVCeTicaret.Models.Customer", "Customer")
                        .WithMany("OrderDetails")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MVCeTicaret.Models.Product", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MVCeTicaret.Models.Payment", b =>
                {
                    b.HasOne("MVCeTicaret.Models.PaymentType", "PaymentType")
                        .WithMany("Payments")
                        .HasForeignKey("PaymentTypeID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MVCeTicaret.Models.Product", b =>
                {
                    b.HasOne("MVCeTicaret.Models.SubCategory", "SubCategory")
                        .WithMany("Products")
                        .HasForeignKey("SubCategoryID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MVCeTicaret.Models.Supplier", "Supplier")
                        .WithMany("Products")
                        .HasForeignKey("SupplierID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MVCeTicaret.Models.RecentlyView", b =>
                {
                    b.HasOne("MVCeTicaret.Models.Customer", "Customer")
                        .WithMany("RecentlyViews")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MVCeTicaret.Models.Product", "Product")
                        .WithMany("RecentlyViews")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MVCeTicaret.Models.Review", b =>
                {
                    b.HasOne("MVCeTicaret.Models.Customer", "Customer")
                        .WithMany("Reviews")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MVCeTicaret.Models.Product", "Product")
                        .WithMany("Reviews")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MVCeTicaret.Models.SubCategory", b =>
                {
                    b.HasOne("MVCeTicaret.Models.Category", "Category")
                        .WithMany("SubCategories")
                        .HasForeignKey("SubCategoryID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MVCeTicaret.Models.WishList", b =>
                {
                    b.HasOne("MVCeTicaret.Models.Customer", "Customer")
                        .WithMany("WishLists")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MVCeTicaret.Models.Product", "Product")
                        .WithMany("WishLists")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
